ref:https://www.kaggle.com/gennadylaptev/factorization-machine-implemented-in-pytorch
import numpy as np
import torch
from sklearn.utils import shuffle

from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris


X,y = load_iris(return_X_y= True)



X_train,X_test, Y_train, Y_test = train_test_split(X,y,test_size=0.25)
#print X_train,Y_train
#print X_test,Y_test

#X_test,Y_test = shuffle(X_test,Y_test)
#print X_test,Y_test
#exit(0)



DEVICE = torch.device( 'cuda' if torch.cuda.is_available() else 'cpu')

X_train = X_train.astype(np.float32)
Y_train = Y_train.astype(np.float32)

X_test = X_test.astype(np.float32)


import torch.optim as optim

class FM(torch.nn.Module):
    def __init__(self, n = None, k = None):
        super(FM,self).__init__()
        self.V = torch.nn.Parameter(torch.randn(n, k), requires_grad=True)
        self.lin = torch.nn.Linear(n, 1)
        self.soft = torch.nn.Linear(1,3)
    def forward(self, x):
        out1 = torch.matmul(x, self.V).pow(2).sum(1,keepdim=True)  #x*v element ^2
        out2 = torch.matmul(x.pow(2),self.V.pow(2)).sum(1,keepdim= True)
        out_inter = 0.5 * (out1 - out2)
        out_lin = self.lin(x)
        out = out_inter + out_lin
        soft = self.soft(out)

        return soft

n = 4
k = 8

fmModel  = FM(4,8)

criterion = torch.nn.CrossEntropyLoss()
optimizer = optim.SGD(fmModel.parameters(), lr=0.001, momentum=0.9)
for epoch in range(200):
    running_loss = 0.0
    optimizer.zero_grad()
    X_test, Y_test = shuffle(X_test, Y_test)
    X_train, Y_train = shuffle( X_train, Y_train)
    input_data = torch.from_numpy(X_train)
    out_target = torch.from_numpy(Y_train)
    out_target = out_target.type(torch.LongTensor)
    output = fmModel(input_data)
    #print output,out_target
    loss = criterion(output, out_target)
    loss.backward()
    optimizer.step()
    running_loss += loss.item()
    if epoch % 5 == 1:
        print('[%d] loss: %.10f' %
            (epoch + 1, running_loss ))

    if epoch % 10 == 1:
        total = 0
        correct = 0
        input_data = torch.from_numpy(X_test)
        out_target = torch.from_numpy(Y_test)
        out_target = out_target.type(torch.LongTensor)
        output = fmModel(input_data)
        _, predicted = torch.max(output, 1)
        total += out_target.size()[0]
        loss = criterion(output, out_target)
        print('[%d] test loss: %.10f' %
            (epoch + 1, running_loss))
        ##print Y_test
        ##print predicted
        ##print predicted == out_target
        correct += (predicted == out_target).sum().item()
        ##print correct,len(Y_test),out_target.size()[0]
        ##print (correct+0.0)/(total+0.0)
        print('Accuracy of the network on the test images: %10f %%' % (
            (correct+0.0 )/ (total+0.0)))




total = 0
correct = 0
input_data = torch.from_numpy(X_test)
out_target = torch.from_numpy(Y_test)
out_target = out_target.type(torch.LongTensor)
output = fmModel(input_data)
_, predicted = torch.max(output, 1)
total += out_target.size()[0]
loss = criterion(output, out_target)
print('[%d] test loss: %.10f' %
            (epoch + 1, running_loss))
correct += (predicted == out_target).sum().item()
print('Accuracy of the network on the test images: %10f %%' % (
            (correct+0.0 )/ (total+0.0)))
