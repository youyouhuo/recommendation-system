#ref:https://github.com/prateekjoshi565/DeepWalk/blob/master/deepwalk_space.ipynb
import networkx as nx
import pandas as pd
import numpy as np
import random
from tqdm import tqdm
from sklearn.decomposition import PCA

df = pd.read_csv("space_data.tsv", sep = "\t")

G=nx.from_pandas_edgelist(df, "source", "target", edge_attr=True, create_using=nx.Graph())

def get_randomwalk(node, path_length):
    random_walk = [node]
    for i in range(path_length - 1):
        temp = list(G.neighbors(node))
        temp = list(set(temp) - set(random_walk))
        if len(temp) == 0:
            break
        random_node = random.choice(temp)
        random_walk.append(random_node)
        node = random_node
    return random_walk

all_nodes = list(G.nodes())

random_walks = []

for n in tqdm(all_nodes):
    for i in range(5):
        random_walks.append(get_randomwalk(n,10))

from gensim.models import Word2Vec

model = Word2Vec(window = 4, sg = 1, hs = 0, nagative = 10,
                 alpha = 0.03,
                 min_alpha = 0.0007,
                 seed = 14)
model.build_vocab(random_walks, progress_per = 2)
model.train(random_walks, total_examples = model.corpus_count, epochs=20, report_delay=1)

model.similar_by_word('astronaut training')

terms = ['lunar escape systems','soviet moonshot', 'soyuz 7k-l1', 'moon landing',
         'space food', 'food systems on space exploration missions', 'meal, ready-to-eat',
         'space law', 'metalaw', 'moon treaty', 'legal aspects of computing',
         'astronaut training', 'reduced-gravity aircraft', 'space adaptation syndrome', 'micro-g environment']


def plot_nodes(word_list):
    X = model[word_list]

    # reduce dimensions to 2
    pca = PCA(n_components=2)
    result = pca.fit_transform(X)

    plt.figure(figsize=(12, 9))
    # create a scatter plot of the projection
    plt.scatter(result[:, 0], result[:, 1])
    for i, word in enumerate(word_list):
        plt.annotate(word, xy=(result[i, 0], result[i, 1]))

    plt.show()

plot_nodes(terms)
